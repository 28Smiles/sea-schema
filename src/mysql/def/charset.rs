use crate as sea_schema;

#[derive(Clone, Debug, PartialEq, sea_query::Iden, sea_schema_derive::Name)]
/// Ref: https://dev.mysql.com/doc/refman/8.0/en/charset-charsets.html
pub enum CharSet {
    #[iden = "armscii8"] Armscii8,
    #[iden = "ascii"] Ascii,
    #[iden = "big5"] Big5,
    #[iden = "binary"] Binary,
    #[iden = "cp1250"] Cp1250,
    #[iden = "cp1251"] Cp1251,
    #[iden = "cp1256"] Cp1256,
    #[iden = "cp1257"] Cp1257,
    #[iden = "cp850"] Cp850,
    #[iden = "cp852"] Cp852,
    #[iden = "cp866"] Cp866,
    #[iden = "cp932"] Cp932,
    #[iden = "dec8"] Dec8,
    #[iden = "eucjpms"] Eucjpms,
    #[iden = "euckr"] Euckr,
    #[iden = "gb18030"] Gb18030,
    #[iden = "gb2312"] Gb2312,
    #[iden = "gbk"] Gbk,
    #[iden = "geostd8"] Geostd8,
    #[iden = "greek"] Greek,
    #[iden = "hebrew"] Hebrew,
    #[iden = "hp8"] Hp8,
    #[iden = "keybcs2"] Keybcs2,
    #[iden = "koi8r"] Koi8r,
    #[iden = "koi8u"] Koi8u,
    #[iden = "latin1"] Latin1,
    #[iden = "latin2"] Latin2,
    #[iden = "latin5"] Latin5,
    #[iden = "latin7"] Latin7,
    #[iden = "macce"] Macce,
    #[iden = "macroman"] Macroman,
    #[iden = "sjis"] Sjis,
    #[iden = "swe7"] Swe7,
    #[iden = "tis620"] Tis620,
    #[iden = "ucs2"] Ucs2,
    #[iden = "ujis"] Ujis,
    #[iden = "utf16"] Utf16,
    #[iden = "utf16le"] Utf16le,
    #[iden = "utf32"] Utf32,
    #[iden = "utf8"] Utf8,
    #[iden = "utf8mb4"] Utf8mb4,
    #[method = "unknown_to_string"] Unknown(String),
}

#[derive(Clone, Debug, PartialEq, sea_query::Iden, sea_schema_derive::Name)]
/// This list is not exhaustive
pub enum Collation {
    #[iden = "armscii8_general_ci"] Armscii8GeneralCi,
    #[iden = "ascii_general_ci"] AsciiGeneralCi,
    #[iden = "big5_chinese_ci"] Big5ChineseCi,
    #[iden = "binary"] Binary,
    #[iden = "cp1250_general_ci"] Cp1250GeneralCi,
    #[iden = "cp1251_general_ci"] Cp1251GeneralCi,
    #[iden = "cp1256_general_ci"] Cp1256GeneralCi,
    #[iden = "cp1257_general_ci"] Cp1257GeneralCi,
    #[iden = "cp850_general_ci"] Cp850GeneralCi,
    #[iden = "cp852_general_ci"] Cp852GeneralCi,
    #[iden = "cp866_general_ci"] Cp866GeneralCi,
    #[iden = "cp932_japanese_ci"] Cp932JapaneseCi,
    #[iden = "dec8_swedish_ci"] Dec8SwedishCi,
    #[iden = "eucjpms_japanese_ci"] EucjpmsJapaneseCi,
    #[iden = "euckr_korean_ci"] EuckrKoreanCi,
    #[iden = "gb18030_chinese_ci"] Gb18030ChineseCi,
    #[iden = "gb2312_chinese_ci"] Gb2312ChineseCi,
    #[iden = "gbk_chinese_ci"] GbkChineseCi,
    #[iden = "geostd8_general_ci"] Geostd8GeneralCi,
    #[iden = "greek_general_ci"] GreekGeneralCi,
    #[iden = "hebrew_general_ci"] HebrewGeneralCi,
    #[iden = "hp8_english_ci"] Hp8EnglishCi,
    #[iden = "keybcs2_general_ci"] Keybcs2GeneralCi,
    #[iden = "koi8r_general_ci"] Koi8RGeneralCi,
    #[iden = "koi8u_general_ci"] Koi8UGeneralCi,
    #[iden = "latin1_swedish_ci"] Latin1SwedishCi,
    #[iden = "latin2_general_ci"] Latin2GeneralCi,
    #[iden = "latin5_turkish_ci"] Latin5TurkishCi,
    #[iden = "latin7_general_ci"] Latin7GeneralCi,
    #[iden = "macce_general_ci"] MacceGeneralCi,
    #[iden = "macroman_general_ci"] MacromanGeneralCi,
    #[iden = "sjis_japanese_ci"] SjisJapaneseCi,
    #[iden = "swe7_swedish_ci"] Swe7SwedishCi,
    #[iden = "tis620_thai_ci"] Tis620ThaiCi,
    #[iden = "ucs2_general_ci"] Ucs2GeneralCi,
    #[iden = "ujis_japanese_ci"] UjisJapaneseCi,
    #[iden = "utf16_general_ci"] Utf16GeneralCi,
    #[iden = "utf16le_general_ci"] Utf16LeGeneralCi,
    #[iden = "utf32_general_ci"] Utf32GeneralCi,
    #[iden = "utf8_general_ci"] Utf8GeneralCi,
    #[iden = "utf8mb4_0900_ai_ci"] Utf8Mb40900AiCi,
    #[method = "unknown_to_string"] Unknown(String),
}

impl CharSet {
    pub fn description(&self) -> String {
        match self {
            Self::Armscii8 => "ARMSCII-8 Armenian".to_owned(),
            Self::Ascii => "US ASCII".to_owned(),
            Self::Big5 => "Big5 Traditional Chinese".to_owned(),
            Self::Binary => "Binary pseudo charset".to_owned(),
            Self::Cp1250 => "Windows Central European".to_owned(),
            Self::Cp1251 => "Windows Cyrillic".to_owned(),
            Self::Cp1256 => "Windows Arabic".to_owned(),
            Self::Cp1257 => "Windows Baltic".to_owned(),
            Self::Cp850 => "DOS West European".to_owned(),
            Self::Cp852 => "DOS Central European".to_owned(),
            Self::Cp866 => "DOS Russian".to_owned(),
            Self::Cp932 => "SJIS for Windows Japanese".to_owned(),
            Self::Dec8 => "DEC West European".to_owned(),
            Self::Eucjpms => "UJIS for Windows Japanese".to_owned(),
            Self::Euckr => "EUC-KR Korean".to_owned(),
            Self::Gb18030 => "China National Standard GB18030".to_owned(),
            Self::Gb2312 => "GB2312 Simplified Chinese".to_owned(),
            Self::Gbk => "GBK Simplified Chinese".to_owned(),
            Self::Geostd8 => "GEOSTD8 Georgian".to_owned(),
            Self::Greek => "ISO 8859-7 Greek".to_owned(),
            Self::Hebrew => "ISO 8859-8 Hebrew".to_owned(),
            Self::Hp8 => "HP West European".to_owned(),
            Self::Keybcs2 => "DOS Kamenicky Czech-Slovak".to_owned(),
            Self::Koi8r => "KOI8-R Relcom Russian".to_owned(),
            Self::Koi8u => "KOI8-U Ukrainian".to_owned(),
            Self::Latin1 => "cp1252 West European".to_owned(),
            Self::Latin2 => "ISO 8859-2 Central European".to_owned(),
            Self::Latin5 => "ISO 8859-9 Turkish".to_owned(),
            Self::Latin7 => "ISO 8859-13 Baltic".to_owned(),
            Self::Macce => "Mac Central European".to_owned(),
            Self::Macroman => "Mac West European".to_owned(),
            Self::Sjis => "Shift-JIS Japanese".to_owned(),
            Self::Swe7 => "7bit Swedish".to_owned(),
            Self::Tis620 => "TIS620 Thai".to_owned(),
            Self::Ucs2 => "UCS-2 Unicode".to_owned(),
            Self::Ujis => "EUC-JP Japanese".to_owned(),
            Self::Utf16 => "UTF-16 Unicode".to_owned(),
            Self::Utf16le => "UTF-16LE Unicode".to_owned(),
            Self::Utf32 => "UTF-32 Unicode".to_owned(),
            Self::Utf8 => "UTF-8 Unicode".to_owned(),
            Self::Utf8mb4 => "UTF-8 Unicode".to_owned(),
            Self::Unknown(_) => "Unknown".to_owned(),
        }
    }

    pub fn default_collation(&self) -> Collation {
        match self {
            Self::Armscii8 => Collation::Armscii8GeneralCi,
            Self::Ascii => Collation::AsciiGeneralCi,
            Self::Big5 => Collation::Big5ChineseCi,
            Self::Binary => Collation::Binary,
            Self::Cp1250 => Collation::Cp1250GeneralCi,
            Self::Cp1251 => Collation::Cp1251GeneralCi,
            Self::Cp1256 => Collation::Cp1256GeneralCi,
            Self::Cp1257 => Collation::Cp1257GeneralCi,
            Self::Cp850 => Collation::Cp850GeneralCi,
            Self::Cp852 => Collation::Cp852GeneralCi,
            Self::Cp866 => Collation::Cp866GeneralCi,
            Self::Cp932 => Collation::Cp932JapaneseCi,
            Self::Dec8 => Collation::Dec8SwedishCi,
            Self::Eucjpms => Collation::EucjpmsJapaneseCi,
            Self::Euckr => Collation::EuckrKoreanCi,
            Self::Gb18030 => Collation::Gb18030ChineseCi,
            Self::Gb2312 => Collation::Gb2312ChineseCi,
            Self::Gbk => Collation::GbkChineseCi,
            Self::Geostd8 => Collation::Geostd8GeneralCi,
            Self::Greek => Collation::GreekGeneralCi,
            Self::Hebrew => Collation::HebrewGeneralCi,
            Self::Hp8 => Collation::Hp8EnglishCi,
            Self::Keybcs2 => Collation::Keybcs2GeneralCi,
            Self::Koi8r => Collation::Koi8RGeneralCi,
            Self::Koi8u => Collation::Koi8UGeneralCi,
            Self::Latin1 => Collation::Latin1SwedishCi,
            Self::Latin2 => Collation::Latin2GeneralCi,
            Self::Latin5 => Collation::Latin5TurkishCi,
            Self::Latin7 => Collation::Latin7GeneralCi,
            Self::Macce => Collation::MacceGeneralCi,
            Self::Macroman => Collation::MacromanGeneralCi,
            Self::Sjis => Collation::SjisJapaneseCi,
            Self::Swe7 => Collation::Swe7SwedishCi,
            Self::Tis620 => Collation::Tis620ThaiCi,
            Self::Ucs2 => Collation::Ucs2GeneralCi,
            Self::Ujis => Collation::UjisJapaneseCi,
            Self::Utf16 => Collation::Utf16GeneralCi,
            Self::Utf16le => Collation::Utf16LeGeneralCi,
            Self::Utf32 => Collation::Utf32GeneralCi,
            Self::Utf8 => Collation::Utf8GeneralCi,
            Self::Utf8mb4 => Collation::Utf8Mb40900AiCi,
            Self::Unknown(_) => panic!("unknown"),
        }
    }

    pub fn max_len(&self) -> u32 {
        match self {
            Self::Armscii8 => 1,
            Self::Ascii => 1,
            Self::Big5 => 2,
            Self::Binary => 1,
            Self::Cp1250 => 1,
            Self::Cp1251 => 1,
            Self::Cp1256 => 1,
            Self::Cp1257 => 1,
            Self::Cp850 => 1,
            Self::Cp852 => 1,
            Self::Cp866 => 1,
            Self::Cp932 => 2,
            Self::Dec8 => 1,
            Self::Eucjpms => 3,
            Self::Euckr => 2,
            Self::Gb18030 => 4,
            Self::Gb2312 => 2,
            Self::Gbk => 2,
            Self::Geostd8 => 1,
            Self::Greek => 1,
            Self::Hebrew => 1,
            Self::Hp8 => 1,
            Self::Keybcs2 => 1,
            Self::Koi8r => 1,
            Self::Koi8u => 1,
            Self::Latin1 => 1,
            Self::Latin2 => 1,
            Self::Latin5 => 1,
            Self::Latin7 => 1,
            Self::Macce => 1,
            Self::Macroman => 1,
            Self::Sjis => 2,
            Self::Swe7 => 1,
            Self::Tis620 => 1,
            Self::Ucs2 => 2,
            Self::Ujis => 3,
            Self::Utf16 => 4,
            Self::Utf16le => 4,
            Self::Utf32 => 4,
            Self::Utf8 => 3,
            Self::Utf8mb4 => 4,
            Self::Unknown(_) => panic!("unknown"),
        }
    }

    pub fn unknown_to_string(&self) -> &String {
        match self {
            Self::Unknown(custom) => custom,
            _ => panic!("not Unknown"),
        }
    }
}

impl Collation {
    pub fn unknown_to_string(&self) -> &String {
        match self {
            Self::Unknown(custom) => custom,
            _ => panic!("not Unknown"),
        }
    }
}